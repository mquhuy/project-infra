ci_git_credential_id = "metal3-jenkins-github-username-token"
ci_git_branch = "main"
ci_git_url = "https://github.com/mquhuy/project-infra.git"

pipeline {
  agent none
  environment {
    IMAGE_TYPE = "${IMAGE_TYPE}"
    METAL3_CI_USER="metal3ci"
    KUBERNETES_VERSION = "${KUBERNETES_VERSION}"
    CRICTL_VERSION = "${CRICTL_VERSION}"
    CRIO_VERSION = "${CRIO_VERSION}"
    RT_URL="https://artifactory.nordix.org/artifactory"
    CLEANUP_AFTERWARDS = "false"
  }
  stages {
    stage('SCM') {
      matrix {
        agent any
        axes {
          axis {
            name 'IMAGE_OS'
            values 'ubuntu'
          }
        }
        environment {
          IMAGE_OS = "${IMAGE_OS}"
        }
        stages {
          stage("Checkout CI Repo") {
            options {
              timeout(time: 5, unit: 'MINUTES')
            }
            steps {
              checkout([$class: 'GitSCM',
                       branches: [[name: ci_git_branch]],
                       doGenerateSubmoduleConfigurations: false,
                       extensions: [[$class: 'WipeWorkspace'],
                       [$class: 'CleanCheckout'],
                       [$class: 'CleanBeforeCheckout']],
                       submoduleCfg: [],
                       userRemoteConfigs: [[credentialsId: ci_git_credential_id,
                       url: ci_git_url]]])
            }
          }
          stage('Build CI image') {
            options {
              timeout(time: 1, unit: 'HOURS')
            }
            steps {
              echo "Building ${IMAGE_OS} CI image"
              catchError([stageResult: 'FAILURE', message: "Failed to build CI image"]) {
                sh """
                ./jenkins/image_building/build-image.sh
                """
              }
            }
          }
          stage("Verify the new CI Image") {
            options {
              timeout(time: 3, unit: 'HOURS')
            }
            steps {
              echo "Testing new ${IMAGE_OS} CI image"
              catchError([stageResult: 'FAILURE', message: "Failed to test CI image"]) {
                script {
                  def imageName = readFile("image_name.txt").trim()
                  echo "imageName: ${imageName}"

                  sh """
                  echo "Testing ${imageName}"
                  ./jenkins/image_building/verify-node-image.sh ${imageName}
                  """
                }
              }
            }
          }
          stage("Upload the new CI Image") {
            options {
              timeout(time: 30, unit: 'MINUTES')
            }
            steps {
              echo "imageName: ${imageName}"
              withCredentials([
                usernamePassword(credentialsId: 'xerces-est-metal3ci', usernameVariable: 'OPENSTACK_USERNAME_XERCES', passwordVariable: 'OPENSTACK_PASSWORD_XERCES'),
                usernamePassword(credentialsId: 'metal3ci_city_cloud_openstack_credentials', usernameVariable: 'OPENSTACK_USERNAME_CLEURA', passwordVariable: 'OPENSTACK_PASSWORD_CLEURA'),
                usernamePassword(credentialsId: 'infra-nordix-artifactory-api-key', usernameVariable: 'RT_USER', passwordVariable: 'RT_TOKEN')
              ]) {
                catchError([stageResult: 'FAILURE', message: "Failed to test CI image"]) {
                  script {
                    sh """
                    source ./jenkins/image_building/upload-node-image.sh
                    upload_node_image ${imageName}
                    """
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
